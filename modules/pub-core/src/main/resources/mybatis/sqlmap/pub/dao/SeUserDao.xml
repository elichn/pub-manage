<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.elichn.pub.core.dao.security.SeUserDao">
    <!--根据用户名查询用户-->
    <select id="selectUserByUserName" resultMap="com.elichn.pub.core.model.mapper.security.SeUserMapper.BaseResultMap">
        select * from se_user where user_name = #{userName};
    </select>

    <!-- 根据查询条件查询用户列表 -->
    <select id="selectUsersList4Page" parameterType="map" resultType="com.elichn.pub.core.model.bvo.SeUserRoleBvo">
        select
            b.id userId,
            b.user_name userName,
            b.cn_name cnName,
            b.user_type userType,
            b.descn userDescn,
            b.status,
            b.email,
            b.role_id roleId,
            b.role_name roleName
        from
        <include refid="selectUsersByPageSql"/>
        order by b.id desc limit #{start},#{pageSize}
    </select>

    <!-- 根据查询条件查询用户条数 -->
    <select id="selectUsersListCount" parameterType="map" resultType="java.lang.Integer">
        select count(1) from
        <include refid="selectUsersByPageSql"/>
    </select>

    <!--根据邮箱email判断该邮箱是否已经被使用-->
    <select id="selectUserListByEmail" parameterType="java.lang.String"
            resultMap="com.elichn.pub.core.model.mapper.security.SeUserMapper.BaseResultMap">
        select * from se_user where email = #{email}
    </select>

    <!--根据角色id列表查询用户列表-->
    <select id="selectUserListByRoleIds" parameterType="List"
            resultMap="com.elichn.pub.core.model.mapper.security.SeUserMapper.BaseResultMap">
        select
          distinct u.*
        from
          se_user_role ur
        join se_user u
        on ur.user_id = u.id and u.status = 1
        and ur.role_id in
        <foreach collection="list" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </select>

    <!--根据角色id查询用户列表-->
    <select id="selectUserListByRoleId" parameterType="int"
            resultMap="com.elichn.pub.core.model.mapper.security.SeUserMapper.BaseResultMap">
        select
          distinct u.*
        from
          se_user_role ur
        join se_user u
        on ur.user_id = u.id and ur.role_id = #{roleId}
    </select>

    <!--根据角色code列表查询用户列表-->
    <select id="selectUserListByCodes"  parameterType="List"
            resultMap="com.elichn.pub.core.model.mapper.security.SeUserMapper.BaseResultMap">
        select
          distinct u.id,
          u.user_name,
          u.cn_name
        from se_user_role ur
        join se_user u
        on ur.user_id = u.id and u.status = 1
        join se_role r
        on ur.role_id = r.id
        and r.code in
        <foreach collection="list" item="item" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </select>

    <sql id="selectUsersByPageSql">
        (select a.id, a.user_name, a.cn_name, a.user_type, a.descn, a.status, a.email, GROUP_CONCAT(a.role_id)
        role_id, GROUP_CONCAT(r.role_name) role_name
        from (select * from se_user u LEFT JOIN se_user_role ur ON u.id = ur.user_id
        where u.user_name!='admin'
        <if test="userName != null and userName.trim() != ''">
            and user_name like CONCAT('%', #{userName},'%')
        </if>
        <if test="status != null">
            and u.status = #{status}
        </if>

        <if test="userType != null">
            and u.user_type = #{userType}
        </if>
        ) a
        left join se_role r on a.role_id = r.id
        <where>

            <choose>
                <when test="roleNames != null">
                    and ((r.role_name in
                    <foreach collection="roleNames" separator="," item="item" open="(" close=")">
                        #{item}
                    </foreach>
                    ) or r.role_name is null)
                </when>

                <otherwise>
                    and r.role_name is null
                </otherwise>
            </choose>
        </where>
        group by a.id) b
        <if test="roleName != null and roleName.trim() != ''">
            where find_in_set(#{roleName},b.role_name)
        </if>
    </sql>
</mapper>